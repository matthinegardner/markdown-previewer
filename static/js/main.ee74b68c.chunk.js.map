{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","setOptions","breaks","placeholder","App","state","markdown","updateMarkdown","this","setState","Fragment","CssBaseline","className","Grid","container","direction","justify","alignItems","item","md","Card","TextField","id","multiline","fullWidth","defaultValue","onChange","e","target","value","dangerouslySetInnerHTML","__html","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gVAMMA,EAASC,EAAQ,IAEvBD,EAAOE,WAAW,CACdC,QAAQ,IAGZ,IAAMC,EAAW,swBAuFFC,E,2MAvDXC,MAAQ,CACJC,SAAUH,G,EAGdI,eAAiB,SAASD,GACtBE,KAAKC,SAAS,CAAEH,c,wEAGV,IAAD,OACGA,EAAaE,KAAKH,MAAlBC,SACR,OACI,kBAAC,IAAMI,SAAP,KACI,kBAACC,EAAA,EAAD,MACA,yBAAKC,UAAU,OACX,gCACI,gDACA,kEAGJ,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAEX,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGP,UAAU,oBACxB,kBAACQ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,GAAG,SACHC,WAAS,EACTC,WAAS,EACTC,aAAcnB,EACdoB,SAAU,SAAAC,GAAC,OACP,EAAKpB,eAAeoB,EAAEC,OAAOC,YAK7C,kBAAChB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGP,UAAU,oBACxB,kBAACQ,EAAA,EAAD,KACI,yBACIE,GAAG,UACHQ,wBAAyB,CACrBC,OAAQhC,EAAOO,e,GA5CrC0B,aC/BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ee74b68c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nconst marked = require(\"marked\");\n\nmarked.setOptions({\n    breaks: true\n});\n\nconst placeholder = `\n# Welcome to the Markdown Preview tool\n\n## What is Markdown?\nsee [Wikipedia](https://en.wikipedia.org/wiki/Markdown)\n\n### Type markdown within the card on the left and the preview will appear on the right!\n\n#### Use one asterisk to start creating a list:\n* milk\n* eggs\n* bread\n\n#### Use two asterisks to type in **bold** text.\n\n#### Use a > sign to enter a blockquote:\n> \"Engineering is the closest thing to magic that exists in the world.\" - Elon Musk\n\n#### Inline code \\`<div></div>\\` is shown within this line.\n\n#### A code block is shown below:\n\\`\\`\\`\nfunction myFunction(someParam) {\n  if (someParam === 'this is cool') {\n    return true;\n  }\n}\n\\`\\`\\`\n\n![React Logo](https://cdn4.iconfinder.com/data/icons/logos-3/600/React.js_logo-512.png)\n`;\nclass App extends Component {\n    state = {\n        markdown: placeholder\n    };\n\n    updateMarkdown = function(markdown) {\n        this.setState({ markdown });\n    };\n\n    render() {\n        const { markdown } = this.state;\n        return (\n            <React.Fragment>\n                <CssBaseline />\n                <div className=\"App\">\n                    <header>\n                        <h1>Markdown Preview</h1>\n                        <h4>Built using React and Material UI</h4>\n                    </header>\n\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n                        <Grid item md={6} className=\"gridItem-wrapper\">\n                            <Card>\n                                <TextField\n                                    id=\"editor\"\n                                    multiline\n                                    fullWidth\n                                    defaultValue={markdown}\n                                    onChange={e =>\n                                        this.updateMarkdown(e.target.value)\n                                    }\n                                ></TextField>\n                            </Card>\n                        </Grid>\n                        <Grid item md={6} className=\"gridItem-wrapper\">\n                            <Card>\n                                <div\n                                    id=\"preview\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: marked(markdown)\n                                    }}\n                                ></div>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}